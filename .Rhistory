devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
#Works perfect.
#Try:
# study_another_outcome(f)
# ooi_selected(2)
# aoi_selected()
reactiveConsole(TRUE)
f <- "FALSE"
t <- "TRUE"
sample_space <- reactiveVal(c(1,2,3))
study_another_outcome <- reactiveVal(t)
ooi_selected <- reactiveVal(1)
aoi_selected <- reactiveVal(2)
list_of_checkboxes <- reactive({
t9 <- study_another_outcome()
t10 <- eval(parse(text=t9))
t11 <- sample_space()
t12 <- aoi_selected()
t13 <- ooi_selected()
if(t10){
t14 <- c(t12,t13)
t15 <- setdiff(t11,t14)
t15
}else{
t16 <- setdiff(t11,t13)
t16
}
})
aoi_remaining_choices <- reactive({
t1 <- sample_space()
t2 <- ooi_selected()
t3 <- setdiff(t1,t2)
t4 <- aoi_selected()
t5 <- setdiff(t3,t4)
t5
})
observe({
message("OOI Choices: ",ooi_selected(),"<>",ooi_remaining_choices())
message("Studied for another outcome: ",study_another_outcome())
if(eval(parse(text=study_another_outcome()))){
message("AOI Choices: ",aoi_selected(),"<>",aoi_remaining_choices())
}
message("List of Checkboxes: ",list_of_checkboxes())
message("Sample Space is: ",sample_space())
})
#Works perfect.
#Try:
# study_another_outcome(f)
# ooi_selected(2)
# aoi_selected()
reactiveConsole(TRUE)
f <- "FALSE"
t <- "TRUE"
sample_space <- reactiveVal(c(1,2,3))
study_another_outcome <- reactiveVal(t)
ooi_selected <- reactiveVal(1)
aoi_selected <- reactiveVal(2)
list_of_checkboxes <- reactive({
t9 <- study_another_outcome()
t10 <- eval(parse(text=t9))
t11 <- sample_space()
t12 <- aoi_selected()
t13 <- ooi_selected()
if(t10){
t14 <- c(t12,t13)
t15 <- setdiff(t11,t14)
t15
}else{
t16 <- setdiff(t11,t13)
t16
}
})
aoi_remaining_choices <- reactive({
t1 <- sample_space()
t2 <- ooi_selected()
t3 <- setdiff(t1,t2)
t4 <- aoi_selected()
t5 <- setdiff(t3,t4)
t5
})
observe({
message("OOI Choices: ",ooi_selected(),"<>",ooi_remaining_choices())
message("Studied for another outcome: ",study_another_outcome())
if(eval(parse(text=study_another_outcome()))){
message("AOI Choices: ",aoi_selected(),"<>",aoi_remaining_choices())
}
message("List of Checkboxes: ",list_of_checkboxes())
message("Sample Space is: ",sample_space())
})
#Works perfect.
#Try:
# study_another_outcome(f)
# ooi_selected(2)
# aoi_selected()
reactiveConsole(TRUE)
f <- "FALSE"
t <- "TRUE"
sample_space <- reactiveVal(c(1,2,3))
study_another_outcome <- reactiveVal(t)
ooi_selected <- reactiveVal(1)
aoi_selected <- reactiveVal(2)
list_of_checkboxes <- reactive({
t9 <- study_another_outcome()
t10 <- eval(parse(text=t9))
t11 <- sample_space()
t12 <- aoi_selected()
t13 <- ooi_selected()
if(t10){
t14 <- c(t12,t13)
t15 <- setdiff(t11,t14)
t15
}else{
t16 <- setdiff(t11,t13)
t16
}
})
aoi_remaining_choices <- reactive({
t1 <- sample_space()
t2 <- ooi_selected()
t3 <- setdiff(t1,t2)
t4 <- aoi_selected()
t5 <- setdiff(t3,t4)
t5
})
ooi_remaining_choices <- reactive({
t4 <- sample_space()
t7 <- ooi_selected()
t5 <- isolate(aoi_selected())
t6 <- setdiff(t4,t5)
t8 <- setdiff(t6,t7)
t99 <- setdiff(t4,t7)
if(eval(parse(text=study_another_outcome()))){
t8
}else{
aoi_selected(t8[1])
t99
}
})
observe({
message("OOI Choices: ",ooi_selected(),"<>",ooi_remaining_choices())
message("Studied for another outcome: ",study_another_outcome())
if(eval(parse(text=study_another_outcome()))){
message("AOI Choices: ",aoi_selected(),"<>",aoi_remaining_choices())
}
message("List of Checkboxes: ",list_of_checkboxes())
message("Sample Space is: ",sample_space())
})
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
cat("a","b")
cat(NULL,"b")
print(cat(NULL,"b"))
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
reactiveConsole(TRUE)
t <- reactiveVal()
s <- reactive({
if(is.null(t)){
return(1)
}else{
return(t)
}
})
s()
s <- reactive({
if(is.null(t)){
return(1)
}else{
return(t())
}
})
s()
t(7)
s()
t(NULL)
s()
s <- reactive({
if(is.null(t()){
s <- reactive({
if(is.null(t()){
s <- reactive({
if(is.null(t()){
s <- reactive({
if(is.null(t())){
return(1)
}else{
return(t())
}
})
t()
t <- reactiveVal()
s()
?reactiveValues
values <- reactiveValues()
values$a <- 3
is.reactive(values$a)
values$a <- reactiveVal()
is.reactive(values$a)
values$a()
values$a(9)
values$a()
t(7)
s()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
b <- c("a"="A","b"="B","c"="C")
a
b
names(b)
b %in% c("A","B")
b == c("A","B")
devtools::load_all()
run_app()
devtools::load_all()
run_app()
a <- rep(c(1,3),5)
a
a <- as.factor(a)
a
levels(a)
devtools::load_all()
run_app()
df <- read.csv("~/Ugent_Project/selection_bias/related_material/dataset/jacus/metafile_fin_23Oct2024_for_input.csv")
df$BMI.class
new_values <- gsub(" $","",df$BMI.class)
levels(as.factor(new_values))
write.csv(new_values,"~/Ugent_Project/selection_bias/related_material/dataset/jacus/BMI_CLASS.csv")
devtools::load_all()
run_app()
sum(c(9,4,3,NA))
sum(c(9,4,3,NA),na.rm = TRUE)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
?ggsave
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
ggplot(mtcars, aes(wt,mpg)) +
geom_point()
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
a <- list(c(5,6,7))
a
a[[]]
a[[1]]
a[[1:1]]
a[[1:2]]
a[[2]] <- c(7,4,3)
a
k <- vector("vector",5)
k <- vector("list",5)
?vector
k <- vector("character",5)
k[[1]]
k[1]
k[[1]] <- ":afd"
k
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
?renderSlickR
run_app()
devtools::load_all()
run_app()
library(htmlwidgets)
nba_player_logo$uri
library(htmlwidgets)
library(slickR)
nba_player_logo$uri
golem::add_fct("plots_tr")
plots()
source("R/fct_plots_tr.R")
plots()
reactiveConsole(TRUE)
observe({
print(plots())
})
devtools::load_all()
run_app()
replicate(1,4+5)
?replicate
hist(replicate(100, mean(rexp(10))))
rexp(10)
hist(replicate(100, mean(rnorm(10))))
hist(replicate(100, mean(rnorm(10))))
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
library(shinyWidgets)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
reactiveConsole(TRUE)
plots <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num,{
xmlSVG({hist(rnorm(n_obs),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
n_obs <- reactiveVal(10)
plot_num <- reactiveVal(3)
plots()
n_obs()
plot_num()
n_obs(4)
plots()
?plots()
reactiveConsole(TRUE)
plot_num <- reactiveVal(3)
n_obs <- reactiveVal(10)
ploter_funct <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num,{
xmlSVG({hist(rnorm(n_obs),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
ploter_funct()
reactiveConsole(TRUE)
plot_num <- reactiveVal(3)
n_obs <- reactiveVal(10)
ploter_funct <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num(),{
xmlSVG({hist(rnorm(n_obs()),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
ploter_funct()
library(xml2)
ploter_funct()
library(xml2)
reactiveConsole(TRUE)
plot_num <- reactiveVal(3)
n_obs <- reactiveVal(10)
ploter_funct <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num(),{
xmlSVG({hist(rnorm(n_obs()),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
?xmlSVG
if (require("xml2")) {
x <- xmlSVG(plot(1, axes = FALSE))
x
xml_find_all(x, ".//text")
}
