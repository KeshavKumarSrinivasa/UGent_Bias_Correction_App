output$pageContent <- renderUI({
htmlTemplate(app_sys("app/www/page1_welcome.html"))  # Load Page 1
})
})
# Observe when "Back to Home" is clicked
observeEvent(input$back_to_home, {
output$pageContent <- renderUI({
htmlTemplate(app_sys("app/www/page0_landing.html"))  # Load Home Page again
})
})
# Set up JavaScript to listen for link clicks and notify Shiny
session$sendCustomMessage(type = 'init', message = NULL)
# Call the server logic for the modules using moduleServer
mod_metabolomics_upload_server("metabolomics_upload")
mod_participant_upload_server("participant_upload")
# Call primary and secondary outcome server modules
# selected_primary_outcome <- mod_select_primary_outcome_server("select_primary_outcome_1", r = r)
# mod_select_secondary_outcome_server("select_secondary_outcome_1", selected_primary_outcome, r = r)
observe({
req(analysis_values())
# IPW download functionality
mod_download_ipw_server("download_ipw_1",data_with_weights = analysis_values()$ip_weights$data_with_weights)
# Model Coefficients functionality
mod_download_model_coefficients_server("download_model_coefficients_1",data_model_coefficients = analysis_values()$multivariate_results$all_coefficients)
# Univariate Analysis functionality
mod_download_univariate_analysis_server("download_univariate_analysis_1",data_univariate_results = analysis_values()$univariate_results$results)
#SMD Analysis
mod_download_smd_analysis_server("download_smd_analysis_1",data_smd = analysis_values()$smd_results )
})
#Metabolite ID's along
mod_metabolite_along_server("metabolite_along_1")
}
?app_server
??app_server
help(":")
?input
??input
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
golem::add_fct("get_weights_new_version")
?glmnet
?cv.glmnet
?predict
?predict.glmnet
rep(c("a","b"),10)
as.factor(rep(c("a","b"),10))
as.integer(as.factor(rep(c("a","b"),10)))
?predict
?one_of
a <- list(obse = ifelse(rbinom(19,1,0.6),"Yes","No"))
a
z <- data.frame(a)
z
secondary_outcome <- "obse"
z %>% select(all_of(secondary_outcome)) %>% as.factor() %>% as.integer()
z %>% select(all_of(secondary_outcome))
z %>% select(all_of(secondary_outcome)) %>% as.factor()
z %>% select(all_of(secondary_outcome)) %>% as.factor(.)
z %>% select(all_of(secondary_outcome)) %>% as.factor
z %>% select(all_of(secondary_outcome)) %>% mutate(as.factor)
z %>% select(all_of(secondary_outcome)) %>% mutate(secondary_outcome,as.factor)
z %>% mutate_at(secondary_outcome,as.factor)
z %>% mutate_at(secondary_outcome,function() as.integer(as.factor))
z %>% mutate_at(secondary_outcome,function(x) as.integer(as.factor(x)))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
}
z %>% mutate_at(secondary_outcome,make_as_case_control)
make_as_case_control
z %>% mutate(thinga = make_as_case_control(secondary_outcome))
z %>% mutate_at(secondary_outcome,make_as_case_control)
z %>% mutate(thinga = make_as_case_control(secondary_outcome))
View(make_as_case_control)
View(make_as_case_control)
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
}
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==2,"Case","Control")
}
z %>% mutate(thinga = make_as_case_control(secondary_outcome))
z %>% mutate(thinga = if_else(make_as_case_control(secondary_outcome)))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
}
z %>% mutate(thinga = if_else(make_as_case_control(secondary_outcome)))
z %>% mutate(thinga = (make_as_case_control(secondary_outcome)))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
if_else(converted_to_integer==1,"Case","Control")
}
z %>% mutate(thinga = (make_as_case_control(secondary_outcome)))
z %>% mutate_at(thinga = (make_as_case_control(secondary_outcome)))
z %>% mutate_at(secondary_outcome,make_as_case_control)
z %>% mutate_at(secondary_outcome,make_as_case_control)
z %>% mutate(thinga = (make_as_case_control(secondary_outcome)))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
}
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
print(converted_to_integer)
}
z %>% mutate(thinga = (make_as_case_control(secondary_outcome)))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer=1,"Case","Control")
print(converted_to_integer)
}
z %>% mutate(thinga = (make_as_case_control(secondary_outcome)))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
print(converted_to_integer)
}
secondary_outcome
z %>% mutate(thinga = make_as_case_control(secondary_outcome))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
print(converted_to_integer)
ifelse(converted_to_integer==1,"Case","Control")
}
z %>% mutate(thinga = make_as_case_control(secondary_outcome))
make_as_case_control <- function(x){
print(x)
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
}
z %>% mutate(thinga = make_as_case_control(secondary_outcome))
make_as_case_control <- function(x){
converted_to_integer <- as.integer(as.factor(x))
ifelse(converted_to_integer==1,"Case","Control")
}
z %>% mutate(thinga = across(secondary_outcome,make_as_case_control))
make_as_case_control()
make_as_case_control
z %>% mutate(thinga = across(secondary_outcome,make_as_case_control))
z %>% mutate(thinga = make_as_case_control)
df <- tibble(x = 1, y = 2)
df
vars <- c("mass", "height")
starwars
mutate(starwars, prod = .data[[vars[[1]]]] * .data[[vars[[2]]]])
mutate(starwars, prod = .data[[vars[[1]]]] * .data[[vars[[2]]]]) %>% select(prod)
z %>% mutate(thinga = make_as_case_control(.data[[secondary_outcome]]))
z <- mutate(starwars, prod = .data[[vars[[1]]]] * .data[[vars[[2]]]]) %>% select(prod)
z
z %>% mutate(thinga = make_as_case_control(.data[[secondary_outcome]]))
z <- data.frame(a)
z %>% mutate(thinga = make_as_case_control(.data[[secondary_outcome]]))
z <- z %>% mutate(thinga = make_as_case_control(.data[[secondary_outcome]]))
z
z %>% select(all_of("thinga",secondary_outcome))
z %>% select(all_of("thinga"))
z %>% select(all_of(secondary_outcome))
z %>% select(all_of(c(thinga,secondary_outcome))()
z %>% select(all_of(c(thinga,secondary_outcome))
z %>% select(all_of(c(thinga,secondary_outcome)))
z %>% select(all_of(c("thinga",secondary_outcome)))
z %>% select(all_of(c(thinga,secondary_outcome)))
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
1*1:10
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
?cv.glmnet
devtools::load_all(".")
run_app()
?glmnet
devtools::load_all(".")
run_app()
?cv.glmnet
?glmnet
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
a <- list(r=4,t=5)
append(a,"r")
append(a,"r",50)
append(a,list(k=8))
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
as.numeric("10")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
run_app()
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
df <- read.csv("data_with_weights.csv")
weighted.mean(x=df$age,w = df$weights)
weighted.mean(x=df[df$obese=="Lean","age"],w = df[df$obese=="Lean","weights"])
weighted.mean(x=df[df$obese=="Obese","age"],w = df[df$obese=="Lean","weights"])
weighted.mean(x=df[df$obese=="Obese","age"],w = df[df$obese=="Obese","weights"])
13.34633 = 13.23424
13.34633 - 13.23424
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
cars
mtcars
colnames(mtcars)
mtcars %>% select(c("mpg","cyl","disp"))
mtcars %>% select(c("mpg","cyl","disp")) %>% filter("Ford Pantera L ")
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(.data))
rownames(mtcars)
rownames(mtcars)[:4]
rownames(mtcars)[1:4]
r_names <- rownames(mtcars)[1:4]
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(.data) %in% r_names)
?filter
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(.data) %in% r_names)
%in%
rownames(mtcars) %in% r_names
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(mtcars) %in% r_names)
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(!(rownames(mtcars) %in% r_names))
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(mtcars) %in% r_names)
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(mtcars) %in% r_names)
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(!(rownames(mtcars) %in% r_names))
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(mtcars) %in% r_names)
mtcars %>% select(c("mpg","cyl","disp")) %>% filter(rownames(.data) %in% r_names)
mtcars %>%
rownames_to_column(var = "car_name") %>%  # Convert rownames to a column
select(c("car_name", "mpg", "cyl", "disp")) %>%  # Include rownames (car_name) in the selection
filter(car_name %in% r_names)  # Filter based on the car_name
mtcars %>%
rownames_to_column(var = "car_name")
mtcars %>% rownames_to_column(var="car_name")
library(dplyr)
mtcars %>% rownames_to_column(var="car_name")
mtcars %>% rownames_to_column()
mtcars %>% rownames_to_column()
library(tibble)
mtcars %>% rownames_to_column()
mtcars %>%
rownames_to_column(var = "car_name") %>%  # Convert rownames to a column
select(c("car_name", "mpg", "cyl", "disp")) %>%  # Include rownames (car_name) in the selection
filter(car_name %in% r_names)  # Filter based on the car_name
\
mtcars %>%
rownames_to_column(var = "car_name") %>%  # Convert rownames to a column
select(c("car_name", "mpg", "cyl", "disp")) %>%  # Include rownames (car_name) in the selection
filter(car_name %in% r_names)  # Filter based on the car_name
\
mtcars %>%
rownames_to_column(var = "car_name") %>%  # Convert rownames to a column
select(c("car_name", "mpg", "cyl", "disp")) %>%  # Include rownames (car_name) in the selection
filter(car_name %in% r_names)  # Filter based on the car_name
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
#Import required library
library(caret)
#Creates vectors having data points
expected_value <- factor(c(1,0,1,0,1,1,1,0,0,1))
predicted_value <- factor(c(1,0,0,1,1,1,0,0,0,1))
#Creating confusion matrix
example <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
example
example$byClass
example$table
class(example$table)
class(as.data.frame(example$table))
as.data.frame(example$table)
as.matrix(example$table)
dim(as.matrix(example$table))
cm<- (as.matrix(example$table))
write.csv(cm,"cf.csv")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
a <- rbinom(10,1,0.5)
mean(a)
sd(a)
a*(1-a)
mean(a)*(1-mean(a))
sd(a)^2
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
if("a"=="a"){
print("hello")
}
if("a"="a"){
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
