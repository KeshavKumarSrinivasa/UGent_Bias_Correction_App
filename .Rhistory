b == c("A","B")
devtools::load_all()
run_app()
devtools::load_all()
run_app()
a <- rep(c(1,3),5)
a
a <- as.factor(a)
a
levels(a)
devtools::load_all()
run_app()
df <- read.csv("~/Ugent_Project/selection_bias/related_material/dataset/jacus/metafile_fin_23Oct2024_for_input.csv")
df$BMI.class
new_values <- gsub(" $","",df$BMI.class)
levels(as.factor(new_values))
write.csv(new_values,"~/Ugent_Project/selection_bias/related_material/dataset/jacus/BMI_CLASS.csv")
devtools::load_all()
run_app()
sum(c(9,4,3,NA))
sum(c(9,4,3,NA),na.rm = TRUE)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
?ggsave
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
ggplot(mtcars, aes(wt,mpg)) +
geom_point()
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
a <- list(c(5,6,7))
a
a[[]]
a[[1]]
a[[1:1]]
a[[1:2]]
a[[2]] <- c(7,4,3)
a
k <- vector("vector",5)
k <- vector("list",5)
?vector
k <- vector("character",5)
k[[1]]
k[1]
k[[1]] <- ":afd"
k
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
?renderSlickR
run_app()
devtools::load_all()
run_app()
library(htmlwidgets)
nba_player_logo$uri
library(htmlwidgets)
library(slickR)
nba_player_logo$uri
golem::add_fct("plots_tr")
plots()
source("R/fct_plots_tr.R")
plots()
reactiveConsole(TRUE)
observe({
print(plots())
})
devtools::load_all()
run_app()
replicate(1,4+5)
?replicate
hist(replicate(100, mean(rexp(10))))
rexp(10)
hist(replicate(100, mean(rnorm(10))))
hist(replicate(100, mean(rnorm(10))))
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
library(shinyWidgets)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
reactiveConsole(TRUE)
plots <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num,{
xmlSVG({hist(rnorm(n_obs),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
n_obs <- reactiveVal(10)
plot_num <- reactiveVal(3)
plots()
n_obs()
plot_num()
n_obs(4)
plots()
?plots()
reactiveConsole(TRUE)
plot_num <- reactiveVal(3)
n_obs <- reactiveVal(10)
ploter_funct <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num,{
xmlSVG({hist(rnorm(n_obs),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
ploter_funct()
reactiveConsole(TRUE)
plot_num <- reactiveVal(3)
n_obs <- reactiveVal(10)
ploter_funct <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num(),{
xmlSVG({hist(rnorm(n_obs()),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
ploter_funct()
library(xml2)
ploter_funct()
library(xml2)
reactiveConsole(TRUE)
plot_num <- reactiveVal(3)
n_obs <- reactiveVal(10)
ploter_funct <- eventReactive(c(n_obs,plot_num),{
replicate(plot_num(),{
xmlSVG({hist(rnorm(n_obs()),
col = 'darkgray',
border = 'white')},
standalone=TRUE)
},simplify = FALSE)
})
?xmlSVG
if (require("xml2")) {
x <- xmlSVG(plot(1, axes = FALSE))
x
xml_find_all(x, ".//text")
}
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
run
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
c_adjust <- read.csv("../../jacus_project/jacus_dataset/varaibles_to_adjust_for_confounding.csv")
c_adjust_a1 <- c_adjust %>% filter(Analysis.1=="y") %>% select(X)
c_adjust_a2 <- c_adjust %>% filter(Analysis.2=="y") %>% select(X)
df <- read.csv("../../related_material/dataset/jacus/metafile_fin_23Oct2024_for_input.csv")
sum(is.na(df[,c_adjust_a1$X]))
colnames(df)
sum(is.na(df[,make.names(c_adjust_a1$X)]))
make.names(c_adjust_a1$X)
devtools::load_all()
run_app()
a <- list(b=list(e=2,r=3))
a
d = list(e=2,r=3)
a <- list(b=1,d)
a
d
append(a,d)
a <- list(b=1)
append(a,d)
a
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
a
a <- Null
a <- NULL
a <- list(t=1,e=4)
devtools::load_all()
run_app()
devtools::load_all()
run_app()
replicate(1,rnorm(1),simplify = FALSE)
replicate(1,rnorm(1),simplify = TRUE)
?lapply(list, function)
?lapply
lapply(c("A","B"), function(x){paste(x,"pple")})
sapply(c("A","B"), function(x){paste(x,"pple")})
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
xmlSVG(plot(1))
devtools::load_all()
run_app()
devtools::load_all()
run_app()
xmlSVG(ggplot(1))
xmlSVG(ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point())
devtools::load_all()
run_app()
devtools::load_all()
run_app()
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point())
}
)
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
geom_point()))
})
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point())
})
xmlSVG({
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
geom_point())
})
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)
)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) + geom_bar()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) + geom_point()
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point()
)
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)))
devtools::load_all()
run_app()
?show
devtools::load_all()
run_app()
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point())
})
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species))) +
geom_point()
})
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)))
})
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point())
})
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point())
})
devtools::load_all()
run_app()
devtools::load_all()
run_app()
xmlSVG({
show(ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point())
})
xmlSVG({
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
geom_point()
})
xmlSVG({NULL})
?xmlSVG
tr <- list(a=1,b=3)
lapply(tr, function(x){x})
tr
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
library(slickR)
devtools::load_all()
library(slickR)
run_app()
?renderSlickR
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
install.packages("openxlsx")
library(openxlsx)
imap
?imap
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
df <- read.csv("C:/Users/kesriniv/Downloads/Re_ Datasets for the method development paper with KU Leuven/EDITED/metafile_fin_23Oct2024.csv")
for col in colnames(df){}
for col in colnames(df){
for i in seq_along(colnames(df)){
for (col in colnames(df)) {
print(col)
}
na_list <- list()
for (col in colnames(df)) {
na_list <- append(na_list,list(col=sum(is.na(df[[col]]))))
}
na_list
na_list <- list()
for (col in colnames(df)) {
na_list <- append(na_list,list(paste(col)=sum(is.na(df[[col]]))))
na_list <- list()
for (col in colnames(df)) {
z <- paste(col)
na_list <- append(na_list,list(z=sum(is.na(df[[col]]))))
}
na_list
na_list <- list()
for (col in colnames(df)) {
na_count <- sum(is.na(df[[col]]))
na_list[[col]] <- na_count
}
na_list
na_df <- as.data.frame(na_list)
na_df
na_df |> select(across(sum(.)>0))
library(dplyr)
na_df |> select(across(sum(.)>0))
na_df |> select(where(sum(.)>0))
na_df |> select(where(~sum(.)>0))
na_df |> select(where(~sum(.)>0)) |> colnames()
df |> drop_na()
library(tidyr)
df |> drop_na()
df |> drop_na() |> dim()
df |> dim()
library(gtsummary)
df |> dim() |> select(Age.in.months,Sex,BMI.class) |> gtsummary::tbl_summary()
df |> dim() |> select(Age.in.months,Sex,BMI.class)
df |> dim() |> select(Sex)
df |>  select(Sex)
df |>  select(Age.in.months,Sex,BMI.class)
df |>  select(Age.in.months,Sex,BMI.class) |> tbl_summary()
df |>  select(Age.in.months,Sex,BMI.class) |> summary()
df |>  select(Age.in.months,Sex,BMI.class) |> is.na() |> sum()
df |>  select(Age.in.months,Sex,BMI.class) |> is.na()
df |>  select(Age.in.months,Sex,BMI.class) |> is.na() |> sum()
devtools::load_all()
run_app()
devtools::check()
install.packages("lattice")
devtools::check()
devtools::check()
devtools::load_all()
run_app()
devtools::load_all()
run_app()
